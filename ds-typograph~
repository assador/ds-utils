#!/usr/bin/perl
# Scrofa Typograph. Скрипт чистит (X)HTML-код и развлекается автотипографикой.

use strict;
use warnings;
use utf8;
use open qw/:encoding(UTF-8) :std/;
use POSIX;
use Getopt::Std;

my %opts;
my $mode = 2;
my $uselang = 0;
my $skipstrings = '<!--.*?-->|<(applet|code|embed|iframe|noembed|object|plaintext|pre|samp|script|var|xmp)(?!\w)[^<>]*>.*?</\1>';
my $tagstocut = "basefont|bgsound|big|blink|center|font|marquee|nobr|small|wbr";
my $contenttocut = "head|link|meta|style|title";
my $attrtoleave = "abbr|accept|accept-charset|accesskey|action|alt|archive|autoplay|axis|buffered|char|charoff|charset|checked|cite|class|classid|codebase|codetype|cols|colspan|content|controls|coords|data|datetime|declare|defer|dir|disabled|enctype|for|frame|headers|href|hreflang|http-equiv|id|ismap|label|lang|longdesc|loop|maxlength|media|method|multiple|muted|name|nohref|on\\w+|played|preload|poster|profile|readonly|rel|rev|rows|rowspan|rules|scheme|scope|selected|shape|span|src|standby|start|style|summary|tabindex|target|title|type|usemap|value|valuetype|volume";
my $tagss = "area|base|basefont|bgsound|br|col|frame|hr|img|input|isindex|link|meta|param|wbr";
my $tagsb = "address|applet|area|base|basefont|bgsound|blockquote|body|br|caption|center|code|col|colgroup|dd|dir|div|dl|dt|embed|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|hr|html|isindex|legend|li|link|map|marquee|menu|meta|noembed|noframes|noscript|object|ol|optgroup|option|p|param|plaintext|pre|script|style|table|tbody|td|tfoot|th|thead|title|tr|ul|xmp";

$skipstrings =~ s/\\(\d+)/'\\'.($1+1)/ge;
my @sample;
my @replace;
my $source = "";
my @skippedstrings = ();
my @subst = ('hJpQe8ZyX3', 'es0uZUDcvD', 'vnkB1Ao8HD', 'SPIufTR806', 'oC1f45lrdI');
my %symbols = (
	'sInbsp' => "&nbsp;|&\\#160;|\N{U+00A0}|[\\s\N{U+0000}-\N{U+0020}]",
	'sEnbsp' => "(?!&nbsp;|&\\#160;|\N{U+00A0})[\\s\N{U+0000}-\N{U+0020}]",
	'nbsp' => "\N{U+00A0}",				'nbsp_m' => "&nbsp;|&\\#160;|\N{U+00A0}",
	'dash' => "\N{U+2014}",				'dash_m' => "-|&ndash;|&mdash;|\N{U+2013}|\N{U+2014}",
										'quot_m' => "\"|\'\'|&quot;|&\\#34;|&\\#39;&\\#39;",
	'laquo' => "\N{U+00AB}",
	'raquo' => "\N{U+00BB}",
	'ldquo' => "\N{U+201C}",
	'rdquo' => "\N{U+201D}",
);

# Схлопывание пробелов…
my @sam_init = (
	"(?:$symbols{'sInbsp'}){1,}",																# Объединение строк и удаление лишних пробелов
);
my @rep_init = (
	' ',																						# Объединение строк и удаление лишних пробелов
);
# …или, сохраняя неразнывные пробелы:
my @sam_init_k = (
	"(?:$symbols{'sInbsp'}){0,}($symbols{'nbsp_m'})(?:$symbols{'sInbsp'}){0,}",					# Удаление лишних неразрывных пробелов и обычных вокруг них
	"(?:$symbols{'sEnbsp'}){1,}",																# Объединение строк и удаление лишних пробелов
);
my @rep_init_k = (
	"$symbols{'nbsp'}",																			# Удаление лишних неразрывных пробелов и обычных вокруг них
	' ',																						# Объединение строк и удаление лишних пробелов
);

my @sam_html = (
#	"<(\\w+)[^<>]*>($symbols{'nbsp_m'}|\\s){0,}</\\1>",											# Удаление пустых тэгов
	"</?(?:$tagstocut)(?!\\w)[^<>]*>",															# Удаление определённых тэгов
#	"<($contenttocut)(?!\\w)[^<>]*>.*?</\\1>", "</?(?:$contenttocut)(?!\\w)[^<>]*>",			# Удаление определённых тэгов с контентом
	"(\\s+)(?=[^\\s=]+\\s*=\\s*([\"\']).*?\\2)(?=[^<>]*?>)", "\\s+$subst[0](?!(?:$attrtoleave)\\s*=).*?(?=\\s+$subst[0]|\\s*/*>)", "$subst[0]",	# Удаление аттрибутов тэгов
# то же, что сверху, но прежняя проверенная	"(?=[^<>]*?>)(?<!=)(\\s+)(?![^=]*?[\"\'])(?![=\"\']|\\s*/*>)", "\\s+$subst[0](?!$attrtoleave).*?(?=\\s+$subst[0]|\\s*/*>)", "$subst[0]",	# Удаление аттрибутов тэгов
	"\\s*(</?(?:$tagsb)(?!\\w)[^<>]*>)\\s*",													# Удаление пробелов у блочных тэгов
	"<($tagss)(?!\\w)((?:[^/]|/(?!>))*?)\\s*>",													# Добавление слэша в конец одинарного тэга
);
my @rep_html = (
#	'',																							# Удаление пустых тэгов
	'',																							# Удаление определённых тэгов
#	'', '',																						# Удаление определённых тэгов с контентом
	"\$1$subst[0]", '', '',																		# Удаление аттрибутов тэгов
	'$1',																						# Удаление пробелов у блочных тэгов
	'<$1$2 />',																					# Добавление слэша в конец одинарного тэга
);

my @sam_text = (
#	'([^<>\s]+)-(?![^<>]*?>)([^<>\s]+)',														# Неразрываемость написанного через дефисы
	"(?:\\s|$symbols{'nbsp_m'})(?:$symbols{'dash_m'})(?![^<>]*?>)(?:\\s|$symbols{'nbsp_m'})",	# Замена "тирешных" дефисов на тире
);
my @rep_text = (
#	'<span style=\"white-space: nowrap;\">$1-$2</span>',										# Неразрываемость написанного через дефисы
	"$symbols{'nbsp'}$symbols{'dash'} ",														# Замена "тирешных" дефисов на тире
);

my @sam_textonly = (
#	'<', '>',																					# Замена на десятичные представления XML
);
my @rep_textonly = (
#	'&#60;', '&#62;',																			# Замена на десятичные представления XML
);

sub setent {																					# Применение общих фильтров
	my $text = shift;
	my $ret = $text;
	my $pos;
	for(my $c = 0; $c < scalar @sample; $c++) {
		$text = $ret;
		$ret = "";
		$pos = 0;
		my $s = $sample[$c];
		my $r = $replace[$c];
		$s =~ s/\\(\d+)/'\\'.($1+1)/ge;
		$r =~ s/\$(\d+)/'".$'.($1+1).'."'/ge;
		$r = '"'.$r.'"';
		while($text =~ m/(.*?)$s/gsmix) {
			$pos = pos($text);
			$ret .= $1 . (eval $r);
		}
		$ret .= substr($text, $pos);
	}
	return $ret;
}
sub quotations {																				# Расстановка кавычек
	my $text = shift;
	$text =~ s/(\w[[:punct:]]*(?:<[^<>]*?>){0,})(?:$symbols{'quot_m'})(?![^<>]*?>)($|[\s[:punct:]])/$1$subst[0]$2/gs;			# Закрывающие дюймы
	$text =~ s/(^|\s|>|\(|$symbols{'nbsp_m'})(?:$symbols{'quot_m'})(?![^<>]*?>)(?=(?:<[^<>]*?>){0,}[а-яА-ЯёЁ])/$1$subst[1]/gs;	# Открывающие дюймы перед кириллицей
	$text =~ s/(^|\s|>|\(|$symbols{'nbsp_m'})(?:$symbols{'quot_m'})(?![^<>]*?>)(?=(?:<[^<>]*?>){0,}\w)/$1$subst[2]/gs;			# Открывающие дюймы перед остальными
	while($text =~ m/$subst[0]|$subst[1]|$subst[2]/gsx) {
		$text =~ s/$subst[1]((?:(?!$subst[1]|$subst[2]).)*?)$subst[0]/$symbols{'laquo'}$1$symbols{'raquo'}/gs;
		$text =~ s/$subst[2]((?:(?!$subst[1]|$subst[2]).)*?)$subst[0]/$symbols{'ldquo'}$1$symbols{'rdquo'}/gs;
	}
	$text =~ s/($symbols{'laquo'}.*)$subst[0]/$1$symbols{'raquo'}/gs;
	$text =~ s/($symbols{'ldquo'}.*)$subst[0]/$1$symbols{'rdquo'}/gs;
	$text =~ s/$subst[0]/\"/gs;
	$text =~ s/$subst[1]/$symbols{'laquo'}/gs;
	$text =~ s/$subst[2]/$symbols{'ldquo'}/gs;
	return $text;
}
sub cuttocontent {																				# Обрезание до контента
	my $text = shift;
	$text =~ s/.*<body[^<>]*?>//is;
	$text =~ s/<\/body>.*//is;
	return $text;
}
sub lowercasehtml {																				# Перевод тэгов в нижний регистр
	my $text = shift;
	$text =~ s/(<\/?\w+)/\L$1/gsm;
	$text =~ s/(?=[^<>]*?>)(?<!=)(\s+)(?![^=]*?[\"\'])(?![=\"\']|\s*\/*>)(\w+)/$1\L$2/gsm;
	return $text;
}
sub fixbr {																						# Удаление лишних и перевод двойных br в p
	my $text = shift;
	my $tagsbwobr = "blockquote|center|div|dl|form|h1|h2|h3|h4|h5|h6|ol|p|table|ul";
	my $brs = "(?:<br(?!\\w)[^<>]*?>\\s*?){2,}";
	while($text =~ m/$brs/gis) {
		$text =~ s/(?:^|(<\/?($tagsbwobr)(?!\w)[^<>]*?>))((?:[^<]|<(?!\/?(?:$tagsbwobr)(?!\w)[^<>]*?>))+?)$brs(.*?)(?=(?:$|<\/?($tagsbwobr)(?!\w)[^<>]*?>))/$1<p>$3<\/p><p>$4<\/p>/gis;
	}
	$text =~ s/(<p(?!\w)[^<>]*?>\s*?){2,}/$1/gis;
	$text =~ s/(<\/p>\s*?){2,}/$1/gis;
	$text =~ s/(<\/?(?:$tagsbwobr)(?!\w)[^<>]*?>)\s*?<br(?!\w)[^<>]*?>/$1/gis;
	$text =~ s/<br(?!\w)[^<>]*?>\s*?(?=<\/?(?:$tagsbwobr)(?!\w)[^<>]*?>)//gis;
	return $text;
}
sub headtables {																				# Поставить заголовки в беззаголовочных таблицах
	my $text = shift;
	while($text =~ s/(<table(?!\w)[^<>]*>)((?:[^<]|<(?!\/tr>))+?)td(?!\w)([^<>]*>)/$1$2th$3/gis) {}
	return $text;
}
sub excludeskipping {
	my $text = shift;
	while($text =~ s/($skipstrings)/push(@skippedstrings, $1); $subst[3] . scalar(scalar(@skippedstrings) - 1) . $subst[4]/gsmiex) {}
	return $text;
}
sub includeskipping {
	my $text = shift;
	while($text =~ s/$subst[3](\d+)$subst[4]/$skippedstrings[$1]/gsmie) {}
	@skippedstrings = ();
	return $text;
}

getopts('KB', \%opts);
unless(exists $opts{'B'}) {
	push(@sam_text, "\\s+(бы?|же?|ли|ль)(?!\\w)");
	push(@sam_text, "(?<=\\d)\\s+(\\w{1,4}\\.)");
	push(@sam_text, "(?<![^\\s|>])((?:(?![-’<>])[[:punct:]]){0,}(?:\\d{1,4}|(?!бы?|же?|ли|ль)\\w{1,2}))\\s+(?=\\w)");
	push(@rep_text, "$symbols{'nbsp'}\$1");
	push(@rep_text, "$symbols{'nbsp'}\$1");
	push(@rep_text, "\$1$symbols{'nbsp'}");
}
while(<STDIN>) {$source .= $_;}
$source = &excludeskipping($source);
if($mode == 1) {
		unless(exists $opts{'K'}) {@sample = @sam_init; @replace = @rep_init;} else {@sample = @sam_init_k; @replace = @rep_init_k;} $source = &setent($source);
		@sample = @sam_text; @replace = @rep_text; $source = &setent($source);
		@sample = @sam_textonly; @replace = @rep_textonly; $source = &setent($source);
		$source = &quotations($source);
}
if($mode == 2) {
#		$source = &cuttocontent($source);
		unless(exists $opts{'K'}) {@sample = @sam_init; @replace = @rep_init;} else {@sample = @sam_init_k; @replace = @rep_init_k;} $source = &setent($source);
		@sample = @sam_html; @replace = @rep_html; $source = &setent($source);
		@sample = @sam_text; @replace = @rep_text; $source = &setent($source);
		$source = &quotations($source);
		$source = &lowercasehtml($source);
		$source = &fixbr($source);
#		$source = &headtables($source);
}
$source = &includeskipping($source);
print $source;
exit 0;
